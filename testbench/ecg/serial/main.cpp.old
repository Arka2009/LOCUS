#include <stdio.h>
#include "fft.h"

#define SIZE 640

#define samplingrate 100
#define windowsize 8 //should be floor(samplingrate * 571 /1000)
#define filtervalue 4

void init(complex* signal)
{
    for(int i=0; i<SIZE; ++i)
    {
        signal[i] = (((i % 10)+0.1)) / 11.0;
    }
}

void filter(complex* signal)
{
    for(int i=0; i<SIZE*5/samplingrate; ++i)
    {
        signal[i] = 0;
    }

    for(int i=SIZE-SIZE*5/samplingrate; i<SIZE; ++i)
    {
        signal[i] = 0;
    }
}

void window(int *peak_position, double *peak_value, complex *signal)
{
    double max = 0;
    for(int i=0; i<SIZE/windowsize; ++i)
    {
        max = 0;
        peak_position[i] = i*windowsize + windowsize/2;
        for(int w=i*windowsize; w<(i+1)*windowsize; ++w)
        {
            if(signal[w].re() > max)
            {
                max = signal[w].re();
                peak_position[i] = w;
                peak_value[i] = max;
            }
        }
    }
}

int main()
{

    //Allocate memory for signal data
    complex *pSignal = new complex[SIZE];

    //Fill signal array with data
    init(pSignal);

    //Apply FFT
    CFFT::Forward(pSignal, SIZE);

    //Filter transformed result
    filter(pSignal);

    //Inverse FFT
    CFFT::Inverse(pSignal, SIZE);

    //Detect peaks
    int* peak_pos = new int[SIZE/windowsize];
    double* peak_val = new double[SIZE/windowsize];
    window(peak_pos, peak_val, pSignal);

/*
    for(int i=0; i<SIZE/windowsize; ++i)
    {
        printf("[%d]=%.2f; ", i, peak_val[i]);
    }
*/

    //Free memory
    delete[] pSignal;
    delete[] peak_pos;
    delete[] peak_val;

    return 0;
}
